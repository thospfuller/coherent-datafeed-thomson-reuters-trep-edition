<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:util="http://www.springframework.org/schema/util" xmlns:task="http://www.springframework.org/schema/task"
    xmlns:int="http://www.springframework.org/schema/integration"
    xmlns:int-jms="http://www.springframework.org/schema/integration/jms"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- Stop is required otherwise we'll see exceptions in the log complaining
         that the "Domain already registered". -->
    <bean id="cacheManager" class="org.infinispan.manager.DefaultCacheManager" destroy-method="stop">
        <constructor-arg name="configurationFile" value="spring/cache-configuration.xml" />
        <constructor-arg name="start" value="true" />
    </bean>

    <bean id="cacheFactory"
        class="com.coherentlogic.coherent.datafeed.factories.infinispan.CacheFactory">
        <constructor-arg name="cacheManager" ref="cacheManager" />
        <constructor-arg name="cacheName" value="cacheEntriesCache" />
        <constructor-arg name="cachedObjectListener"
            ref="cacheEntryRemovedEventListenerEndpoint" />
    </bean>

    <!-- This is a cache that holds primarily handle-to-domain object pairs. 
        It is primarily used when TR is sending results that are chunked. The framework 
        will create a domain object and add it to the cache, and then fill in the 
        details with each result returned from RFA. -->
    <bean id="sessionCache" class="org.infinispan.Cache" factory-bean="cacheFactory"
        factory-method="getInstance" />

    <!-- For caching handles:RFAObjects that will be updated in chunks. -->
    <bean id="queryCache" class="org.infinispan.Cache" factory-bean="cacheFactory"
        factory-method="getInstance" />

    <bean id="directoryCacheFactory"
        class="com.coherentlogic.coherent.datafeed.factories.infinispan.CacheFactory">
        <constructor-arg name="cacheManager" ref="cacheManager" />
        <constructor-arg name="cacheName" value="directoryCache" />
    </bean>

    <!-- The directoryCache has a directory handle associated with a Session. 
        This is important because when RFA responds to a request for directory information 
        it will send a directory handle and we need to be able to associate this 
        with the correct session. -->
    <bean id="directoryCache" class="org.infinispan.Cache"
        factory-bean="directoryCacheFactory" factory-method="getInstance" />

    <!-- This factory is used to create instances of a Cache that will store 
        directory service entry information. When the directory service is queried 
        one or more handles will be returned and the framework will need to populate 
        each of the corresponding DirectoryServiceEntry objects with data that is 
        returned from Thomson Reuters in chunks. Note also that a single handle may 
        be associated with *more than one* DirectoryServiceEntry (ie. dIDN_RDF and 
        IDN_RDF). 1 handle -> 1 cache -> M instances DirectoryServiceEntry (key: 
        name) -->
    <bean id="directoryEntryCacheFactory"
        class="com.coherentlogic.coherent.datafeed.factories.infinispan.CacheFactory">
        <constructor-arg name="cacheManager" ref="cacheManager" />
        <constructor-arg name="cacheName" value="directoryEntryCache" />
    </bean>

    <bean id="directoryEntryCache" class="org.infinispan.Cache"
        factory-bean="directoryEntryCacheFactory" factory-method="getInstance" />

    <bean id="dictionaryEntryCacheFactory"
        class="com.coherentlogic.coherent.datafeed.factories.infinispan.CacheFactory">
        <constructor-arg name="cacheManager" ref="cacheManager" />
        <constructor-arg name="cacheName" value="dictionaryEntryCache" />
    </bean>

    <bean id="dictionaryEntryCache" class="org.infinispan.Cache"
        factory-bean="dictionaryEntryCacheFactory" factory-method="getInstance" />

    <bean id="marketPriceEntryCacheFactory"
        class="com.coherentlogic.coherent.datafeed.factories.infinispan.CacheFactory">
        <constructor-arg name="cacheManager" ref="cacheManager" />
        <constructor-arg name="cacheName" value="marketPriceEntryCache" />
    </bean>

    <bean id="marketPriceEntryCache" class="org.infinispan.Cache"
        factory-bean="marketPriceEntryCacheFactory" factory-method="getInstance" />

    <bean id="ts1DefEntryCacheFactory"
        class="com.coherentlogic.coherent.datafeed.factories.infinispan.CacheFactory">
        <constructor-arg name="cacheManager" ref="cacheManager" />
        <constructor-arg name="cacheName" value="ts1DefEntryCache" />
    </bean>

    <bean id="ts1DefEntryCache" class="org.infinispan.Cache"
        factory-bean="ts1DefEntryCacheFactory" factory-method="getInstance" />

    <bean id="timeSeriesEntryCacheFactory"
        class="com.coherentlogic.coherent.datafeed.factories.infinispan.CacheFactory">
        <constructor-arg name="cacheManager" ref="cacheManager" />
        <constructor-arg name="cacheName" value="timeSeriesEntryCache" />
    </bean>

    <bean id="handleToCompletableFutureCacheFactory"
        class="com.coherentlogic.coherent.datafeed.factories.infinispan.CacheFactory">
        <constructor-arg name="cacheManager" ref="cacheManager" />
        <constructor-arg name="cacheName" value="handleToCompletableFutureCache" />
    </bean>

    <bean id="ricToCompletableFutureCacheFactory"
        class="com.coherentlogic.coherent.datafeed.factories.infinispan.CacheFactory">
        <constructor-arg name="cacheManager" ref="cacheManager" />
        <constructor-arg name="cacheName" value="ricToCompletableFutureCache" />
    </bean>

    <bean id="timeSeriesEntryCache" class="org.infinispan.Cache"
        factory-bean="timeSeriesEntryCacheFactory" factory-method="getInstance" />

    <bean id="handleToCompletableFutureCache" class="org.infinispan.Cache"
        factory-bean="handleToCompletableFutureCacheFactory" factory-method="getInstance" />
    <bean id="ricToCompletableFutureCache" class="org.infinispan.Cache"
        factory-bean="ricToCompletableFutureCacheFactory" factory-method="getInstance" />

    <!-- /////////////////////////////////////////////////////////////////// -->

    <bean id="dictionaryCacheFactory"
        class="com.coherentlogic.coherent.datafeed.factories.infinispan.CacheFactory">
        <constructor-arg name="cacheManager" ref="cacheManager" />
        <constructor-arg name="cacheName" value="dictionaryCache" />
    </bean>

    <!-- The dictionarySessionCache has a dictionary handle associated with 
        a Session. This is important because when RFA responds to a request for dictionary 
        information it will send a dictionary handle and we need to be able to associate 
        this with the correct session. -->
    <bean id="dictionaryCache" class="org.infinispan.Cache"
        factory-bean="dictionaryCacheFactory" factory-method="getInstance" />

    <bean id="marketPriceCacheFactory"
        class="com.coherentlogic.coherent.datafeed.factories.infinispan.CacheFactory">
        <constructor-arg name="cacheManager" ref="cacheManager" />
        <constructor-arg name="cacheName" value="marketPriceCache" />
    </bean>

    <bean id="marketPriceCache" class="org.infinispan.Cache"
        factory-bean="marketPriceCacheFactory" factory-method="getInstance" />

    <bean id="ts1DefCacheFactory"
        class="com.coherentlogic.coherent.datafeed.factories.infinispan.CacheFactory">
        <constructor-arg name="cacheManager" ref="cacheManager" />
        <constructor-arg name="cacheName" value="ts1DefCache" />
    </bean>

    <bean id="ts1DefCache" class="org.infinispan.Cache" factory-bean="ts1DefCacheFactory"
        factory-method="getInstance" />
</beans>