<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:task="http://www.springframework.org/schema/task"
    xmlns:int="http://www.springframework.org/schema/integration"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task.xsd
        http://www.springframework.org/schema/integration
        http://www.springframework.org/schema/integration/spring-integration.xsd">

    <int:channel id="onAuthAddSessionToHeadersChannel"/>

    <int:service-activator
     input-channel="onAuthAddSessionToHeadersChannel"
     output-channel="routeByAuthEventTypeChannel"
     ref="sessionEnricher"
     method="enrich"/>

    <int:channel id="routeByAuthEventTypeChannel"/>

    <int:router input-channel="routeByAuthEventTypeChannel"
     expression="payload.type">
        <!-- Completion events are ignored for the moment. -->
        <int:mapping channel="logChannel"
         value="#{T(com.reuters.rfa.common.Event).COMPLETION_EVENT}"/>
        <int:mapping channel="ommItemEventReceivedChannel"
         value="#{T(com.reuters.rfa.common.Event).OMM_ITEM_EVENT}"/>
    </int:router>

    <int:channel id="ommItemEventReceivedChannel"/>

    <int:transformer ref="ommItemEventTransformer"
     input-channel="ommItemEventReceivedChannel"
     output-channel="ommItemEventChannel"/>

    <int:router
     expression="payload.msg.msgModelType"
     input-channel="ommItemEventChannel"
     default-output-channel="handleUnexpectedEventReceivedChannel">
        <int:mapping channel="processLoginChannel"
         value="#{T(com.reuters.rfa.rdm.RDMMsgTypes).LOGIN}"/>
    </int:router>

    <int:channel id="processLoginChannel"/>

    <int:router input-channel="processLoginChannel"
     default-output-channel="errorChannel"
     resolution-required="true"
     expression="payload.msg.msgType">
        <int:mapping channel="refreshSessionBeanChannel"
         value="#{T(com.reuters.rfa.omm.OMMMsg$MsgType).REFRESH_RESP}"/>
        <int:mapping channel="updateSessionBeanChannel"
         value="#{T(com.reuters.rfa.omm.OMMMsg$MsgType).UPDATE_RESP}"/>
        <int:mapping channel="processLoginStatusResponseChannel"
         value="#{T(com.reuters.rfa.omm.OMMMsg$MsgType).STATUS_RESP}"/>
    </int:router>

    <int:channel id="refreshSessionBeanChannel"/>
    <int:channel id="updateSessionBeanChannel"/>

    <int:service-activator
     input-channel="refreshSessionBeanChannel"
     output-channel="loginWorkflowEndsChannel"
     ref="refreshSessionBeanMessageProcessor"
     method="process"/>

    <int:service-activator
     input-channel="updateSessionBeanChannel"
     output-channel="loginWorkflowEndsChannel"
     ref="refreshSessionBeanMessageProcessor"
     method="process"/>

    <bean id="loginStatusResponseMessageProcessor"
     class="com.coherentlogic.coherent.datafeed.services.message.processors.StatusResponseMessageProcessor">
        <constructor-arg ref="statusResponseAdapter"/>
        <constructor-arg ref="dacsIdCache"/>
        <constructor-arg ref="sessionBeanCache"/>
    </bean>

    <int:channel id="processLoginStatusResponseChannel"/>

    <int:service-activator
     input-channel="processLoginStatusResponseChannel"
     output-channel="hasLoginSucceededChannel"
     ref="loginStatusResponseMessageProcessor"
     method="process"/>

    <int:channel id="hasLoginSucceededChannel"/>

    <int:router input-channel="hasLoginSucceededChannel" expression="@authenticationHelper.loginSucceeded(payload)">
        <int:mapping channel="loadDirectoriesChannel"
         value="#{T(java.lang.Boolean).TRUE}"/>
        <int:mapping channel="loginFailedChannel"
         value="#{T(java.lang.Boolean).FALSE}"/>
    </int:router>

    <int:channel id="loginFailedChannel"/>

    <int:service-activator
     input-channel="loginFailedChannel"
     output-channel="loginWorkflowEndsChannel"
     ref="frameworkEventListenerAdapter"
     method="initialisationFailed"/>

    <bean id="loginWorkflowEndsService" class="com.coherentlogic.coherent.datafeed.services.WorkflowEndsService">
        <constructor-arg value="The login workflow ends."/>
    </bean>

    <int:channel id="loginWorkflowEndsChannel"/>

    <int:service-activator
     input-channel="loginWorkflowEndsChannel"
     ref="loginWorkflowEndsService"
     method="end"/>

    <!-- int:service-activator
     input-channel="loginWorkflowEndsChannel"
     ref="loginWorkflowEndsService"
     method="end"/>

    <int:channel id="processAuthenticationStatusResponseChannel"/>

    <int:recipient-list-router id="authenticationStatusResponseRouter"
     input-channel="processAuthenticationStatusResponseChannel"
        timeout="60000"
        ignore-send-failures="false"
        apply-sequence="true">
        <int:recipient channel="isMsgFinalChannel"/>
        <int:recipient channel="processStatusResponseChannel"/>
    </int:recipient-list-router>

    <int:channel id="isMsgFinalChannel"/>

    <int:router input-channel="isMsgFinalChannel"
     expression="payload.msg.isFinal()">
        <int:mapping channel="loginFailedChannelDueToFinalMsg"
         value="#{T(java.lang.Boolean).TRUE}"/>
        <int:mapping channel="hasLoginSucceededChannel"
         value="#{T(java.lang.Boolean).FALSE}"/>
    </int:router>

    <int:service-activator
     input-channel="loginFailedChannelDueToFinalMsg"
     output-channel="workflowEndsChannel"
     ref="frameworkEventListenerAdapter"
     method="initialisationFailed"/>

    <int:channel id="hasLoginSucceededChannel"/>

    <int:router input-channel="hasLoginSucceededChannel"
     expression="@authenticationHelper.loginSucceeded(payload)">
        <int:mapping channel="loadDirectoriesChannel"
         value="#{T(java.lang.Boolean).TRUE}"/>
        <int:mapping channel="loginFailedChannel"
         value="#{T(java.lang.Boolean).FALSE}"/>
    </int:router>

    <int:channel id="loginFailedChannel"/>

    <int:service-activator
     input-channel="loginFailedChannel"
     output-channel="workflowEndsChannel"
     ref="frameworkEventListenerAdapter"
     method="initialisationFailed"/ -->
</beans>

    <!-- See: https://jira.springsource.org/browse/SPR-7831
         payload.has(#{T(com.reuters.rfa.omm.OMMMsg).HAS_STATE})
         hasStateBean is a hack solution for the problem above.

         payload.has(#{T(com.reuters.rfa.omm.OMMMsg).HAS_STATE})
      -->