<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:task="http://www.springframework.org/schema/task"
    xmlns:int="http://www.springframework.org/schema/integration"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task.xsd
        http://www.springframework.org/schema/integration
        http://www.springframework.org/schema/integration/spring-integration.xsd">

    <!-- NOTE: Authentication will return three events irrespective of it
               succeeding or failing. It is for this reason that if we throw
               an exception it will end up being wrapped in an aggregate
               exception. There should be a way around this such that only one
               exception is thrown, however so far we haven't sorted this out.

               @see AuthenticationHelper
               @see AggregateMessageDeliveryException
      -->

    <!-- NOTE: This was working prior to switching to Spring Boot and we did not have this channel here so I'm
               not sure why adding this was necessary, or how this wasn't throwing an exception in the absence thereof.
      -->
    <int:channel id="onAuthAddSessionToHeadersChannel"/>

    <int:service-activator
     input-channel="onAuthAddSessionToHeadersChannel"
     output-channel="routeByAuthEventTypeChannel"
     ref="authenticationMessageEnricher"
     method="enrich"/>

    <int:channel id="routeByAuthEventTypeChannel"/>

    <int:router input-channel="routeByAuthEventTypeChannel"
     expression="payload.type">
        <!-- Completion events are ignored for the moment. -->
        <int:mapping channel="logChannel"
         value="#{T(com.reuters.rfa.common.Event).COMPLETION_EVENT}"/>
        <int:mapping channel="ommItemEventReceivedChannel"
         value="#{T(com.reuters.rfa.common.Event).OMM_ITEM_EVENT}"/>
    </int:router>

    <int:channel id="ommItemEventReceivedChannel"/>

    <int:transformer ref="ommItemEventTransformer"
     input-channel="ommItemEventReceivedChannel"
     output-channel="ommItemEventChannel"/>

    <!-- See rfa.example.framework.OMMSubAppContext.java
      -->
    <int:router input-channel="ommItemEventChannel"
     expression="payload.msg.msgModelType"
     default-output-channel="handleUnexpectedEventReceivedChannel">
        <int:mapping channel="loginEventReceivedChannel"
         value="#{T(com.reuters.rfa.rdm.RDMMsgTypes).LOGIN}"/>
    </int:router>

    <int:publish-subscribe-channel id="loginEventReceivedChannel"/>

    <int:router input-channel="loginEventReceivedChannel"
     resolution-required="true"
     expression="payload.msg.msgType">
        <!-- previously loadDirectoriesChannel but adding this here ends up
             querying the directories twice-->
        <int:mapping channel="processStatusResponseChannel"
         value="#{T(com.reuters.rfa.omm.OMMMsg$MsgType).REFRESH_RESP}"/>
         <!-- TODO: We need to send this status response message to a queue as
                    well, however for the moment we have refactored this such
                    that we can cause the login to fail. -->
        <int:mapping channel="processAuthenticationStatusResponseChannel"
         value="#{T(com.reuters.rfa.omm.OMMMsg$MsgType).STATUS_RESP}"/>
    </int:router>

    <int:channel id="processAuthenticationStatusResponseChannel"/>

    <int:recipient-list-router id="authenticationStatusResponseRouter"
     input-channel="processAuthenticationStatusResponseChannel"
        timeout="60000"
        ignore-send-failures="false"
        apply-sequence="true">
        <int:recipient channel="isMsgFinalChannel"/>
        <int:recipient channel="processStatusResponseChannel"/>
    </int:recipient-list-router>

    <int:channel id="isMsgFinalChannel"/>

    <int:router input-channel="isMsgFinalChannel"
     expression="payload.msg.isFinal()">
        <int:mapping channel="loginFailedChannelDueToFinalMsg"
         value="#{T(java.lang.Boolean).TRUE}"/>
        <int:mapping channel="hasLoginSucceededChannel"
         value="#{T(java.lang.Boolean).FALSE}"/>
    </int:router>

    <int:service-activator
     input-channel="loginFailedChannelDueToFinalMsg"
     output-channel="workflowEndsChannel"
     ref="frameworkEventListenerAdapter"
     method="initialisationFailed"/>

    <int:channel id="hasLoginSucceededChannel"/>

    <!-- See: https://jira.springsource.org/browse/SPR-7831
         payload.has(#{T(com.reuters.rfa.omm.OMMMsg).HAS_STATE})
         hasStateBean is a hack solution for the problem above.

         payload.has(#{T(com.reuters.rfa.omm.OMMMsg).HAS_STATE})
      -->
    <int:router input-channel="hasLoginSucceededChannel"
     expression="@authenticationHelper.loginSucceeded(payload)">
        <int:mapping channel="loadDirectoriesChannel"
         value="#{T(java.lang.Boolean).TRUE}"/>
        <int:mapping channel="loginFailedChannel"
         value="#{T(java.lang.Boolean).FALSE}"/>
    </int:router>

    <!-- NOTE: loginSuccessful will only be called once the dictionaries
               have been loaded.
      -->
    <int:channel id="loginFailedChannel"/>

    <int:service-activator
     input-channel="loginFailedChannel"
     output-channel="workflowEndsChannel"
     ref="frameworkEventListenerAdapter"
     method="initialisationFailed"/>

    <!-- int:service-activator
     input-channel="loginFailedChannel"
     output-channel="workflowEndsChannel"
     ref="mainUI"
     method="addStatusResponseText"/>

    <int:service-activator
     input-channel="hasLoginSucceededChannel"
     output-channel="workflowEndsChannel"
     ref="mainUI"
     method="addStatusResponseText"/ -->
</beans>
